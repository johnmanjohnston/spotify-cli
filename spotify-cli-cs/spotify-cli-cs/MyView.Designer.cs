using OpenQA.Selenium.DevTools.V116.Page;
using OpenQA.Selenium.DevTools.V116.SystemInfo;
using System;
using Terminal.Gui;
using System.Collections;
using System.Threading;
using OpenQA.Selenium.DevTools.V116.Debugger;

//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.18.0
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace spotify_cli_cs
{
    public partial class MyView : Terminal.Gui.Window
    {
        private Terminal.Gui.Label currentlyPlayingLabel;
        private Terminal.Gui.ProgressBar progressBar;
        int c = 0;

        private Thread tickThread;
        private bool running = true;

        private uint TICK_INTERVAL = 100; // in ms

        private void InitializeComponent()
        {
            // create elements
            this.currentlyPlayingLabel = new Terminal.Gui.Label();
            this.progressBar = new() {
                X = Pos.Center(), Y = Pos.Percent(90),
                Width = 30, Height = 1,
                ProgressBarStyle = ProgressBarStyle.Continuous,
            }; // use Fraction property to set progress

            // style window
            this.Width = Dim.Fill(0);
            this.Height = Dim.Fill(0);
            this.X = 0;
            this.Y = 0;

            this.Modal = false;
            this.Text = "";
            this.Border.BorderStyle = Terminal.Gui.BorderStyle.Single;
            this.Border.Effect3D = false;
            this.Border.DrawMarginFrame = true;

            this.TextAlignment = Terminal.Gui.TextAlignment.Left;
            this.Title = "spotify-cli (Ctrl + Q to quit)";

            // configure currently playing label
            this.currentlyPlayingLabel.Width = 4;
            this.currentlyPlayingLabel.Height = 1;
            this.currentlyPlayingLabel.X = Pos.Center();
            this.currentlyPlayingLabel.Y = Pos.Percent(85);

            this.currentlyPlayingLabel.Text = "currently playing label";
            this.currentlyPlayingLabel.TextAlignment = Terminal.Gui.TextAlignment.Left;

            // add elements
            this.Add(this.currentlyPlayingLabel);
            this.Add(progressBar);

            tickThread = new Thread(() =>
            {
                while (running)
                {
                    Thread.Sleep((int)TICK_INTERVAL);
                    Application.MainLoop.Invoke(Tick);
                }
            });

            tickThread.IsBackground = true;
            tickThread.Start();
        }

        private void Tick()
        {
            c++;
            UpdateCurrentlyPlaying();
            this.progressBar.Fraction = Read.GetNormalizedSongProgress();
        }

        public override bool OnKeyDown(KeyEvent keyEvent)
        {
            string key = keyEvent.Key.ToString().ToLower();
            switch (key) {
                case "space":
                    Modify.TogglePlayPause();
                    break;
                case "cursorleft":
                    Modify.SkipBack();
                    break;
                case "cursorright":
                    Modify.SkipForward();
                    break;
                default: break;
            }

            return base.OnKeyDown(keyEvent);
        }

        // utility 
        private void UpdateCurrentlyPlaying()
        {
            currentlyPlayingLabel.Text = Read.GetCurrentlyPlaying();
        }
    }
}
